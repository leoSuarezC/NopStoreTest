@model System.Collections.Specialized.NameValueCollection
@using Microsoft.AspNetCore.Http.Extensions
@using System.Collections.Specialized
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc
@using System.Text
@using System.Globalization
@using Nop.Custom.Domain;

@using Nop.Custom
@using Omikron.FactFinder
@using Omikron.FactFinder.Data
@using Omikron.FactFinder.Adapter
@using Omikron.FactFinder.Core
@using Omikron.FactFinder.Core.Client
@using Omikron.FactFinder.Core.Page
@using Omikron.FactFinder.Core.Server
@using Omikron.FactFinder.Core.Configuration
@using Omikron.FactFinder.Util

@{
    //title
    Html.AddTitleParts(((SeoInfoModel)ViewBag.SeoInfoModel).MetaTitle);
    //meta
    Html.AddMetaDescriptionParts(((SeoInfoModel)ViewBag.SeoInfoModel).MetaDescription);

    // Uncomment as necessary for localization testing
    // (If all lines are uncommented, the request's preferred language will be used)

    // Culture = "de-de"; UICulture = "de-de";
    // Culture = "en-gb"; UICulture = "en-gb";
    // Culture = "en-us"; UICulture = "en-us";
    Omikron.FactFinder.Util.HttpContextFactory.Current = Context;
    //ViewData["Title"] = String.Format("The is the page for {0}", Context.Request.Query["query"]);
    var requestParser = new RequestParser();
    var requestParameters = requestParser.RequestParameters;
    requestParameters.Add(Model);
    for (int i = 0; i < requestParameters.Count; i++)
    {
        @*<text>@requestParameters.GetKey(i)</text>
            <br />
            <text>@requestParameters.GetValues(i).FirstOrDefault()</text>
            <br />*@
        var seoText = requestParameters.GetValues(i).FirstOrDefault();
        var item = ((IList<SeoMap>)ViewBag.CategorySeoMap).Where(t => t.text_seo == seoText).FirstOrDefault();
        if (item != null)
        {
            requestParameters.Set(requestParameters.GetKey(i), item.text_orig);
        }
    }
    var requestFactory = new HttpRequestFactory(requestParameters);
    var clientUrlBuilder = new Omikron.FactFinder.Core.Client.UrlBuilder(requestParser);

    Search searchAdapter = new Search(requestFactory.GetRequest(), clientUrlBuilder);
    searchAdapter.Sid = Context.Session.Id;
    TagCloud tagCloudAdapter = (ModulesSection.GetInstance().UseTagcloud) ? new TagCloud(requestFactory.GetRequest(), clientUrlBuilder) : null;

    SearchParameters ffParameters = new SearchParameters(requestParameters);
    ViewData["ffParameters"] = ffParameters;

    var trackingEvents = new Dictionary<EventType, NameValueCollection>();
    ViewData["trackingEvents"] = trackingEvents;

    try
    {
        ViewData["campaigns"] = searchAdapter.Campaigns;

        if ((ViewData["campaigns"] as CampaignList).HasRedirect())
        {
            Context.Response.Redirect((ViewData["campaigns"] as CampaignList).GetRedirectUrl().ToString(), true); // execution ends here
        }

        ViewData["status"] = searchAdapter.SearchStatus;
        ViewData["isArticleNumberSearch"] = searchAdapter.IsArticleNumberSearch;
        ViewData["isSearchTimedOut"] = searchAdapter.IsSearchTimedOut;

        ViewData["productsPerPageOptions"] = searchAdapter.ProductsPerPageOptions;
        ViewData["breadCrumbTrail"] = searchAdapter.BreadCrumbTrail;
        ViewData["singleWordSearch"] = searchAdapter.SingleWordSearch;
        ViewData["paging"] = searchAdapter.Paging;
        ViewData["sorting"] = searchAdapter.Sorting;
        ViewData["asn"] = searchAdapter.Asn;
        ViewData["result"] = searchAdapter.Result;
        if (tagCloudAdapter != null)
        {
            ViewData["tagCloud"] = tagCloudAdapter.TagCloudData;
        }

        ViewData["util"] = new RenderHelper(ffParameters, searchAdapter);

        switch ((SearchStatus)ViewData["status"])
        {
            case SearchStatus.ResultsFound:
                break;
            case SearchStatus.EmptyResult:
                break;
            case SearchStatus.NoResult:
                break;
            default://error
                break;
        }
    }
    catch (Search.NoQueryException)
    {
    }

}
@{
    Layout = "_ColumnsTwo";

    //page class
    Html.AppendPageCssClassParts("html-search-page");
}
@section H1{
    <div class="category-page-title">
        <div class="title-picture-wrapper">
            <div class="category-picture-wrapper">
                @await Component.InvokeAsync("Widget", new { widgetZone = "category_details_main_picture", additionalData = 13 })
                <img alt="Picture for category Bikes" title="Picture for category Bikes" src="@ViewBag.CategoryPictureUrl">
            </div>
            <h1>
                <span>@(((SeoInfoModel)ViewBag.SeoInfoModel).H1)</span>
            </h1>
        </div>
    </div>
}
@{
    var campaigns = ViewData["campaigns"] as CampaignList;
    var result = ViewData["result"] as ResultRecords;
    var asn = ViewData["asn"] as AfterSearchNavigation;
    <div class="product-selectors">
        @*if (Model.PagingFilteringContext.AllowProductViewModeChanging)
            {*@
        <div class="product-viewmode">
            <a href="#" title="Grid" class="viewmode-icon grid hidden" style="display: none;"></a>

            <span data-items="3" title="3 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid")" class="grid items-3 selected">3 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid") Grid</span>
            <span data-items="4" title="4 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid")" class="grid items-4">4 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid") Grid</span>
            @*<a href="#" title="List" class="viewmode-icon list">List</a>*@
        </div>
        @*}*@
        @if (result != null && result.Count > 0 && !ffParameters.IsNavigation)
        {
            <div class="product-page-size">
                @{
                    var productsPerPageOptions = ViewData["productsPerPageOptions"] as ProductsPerPageOptions;
                }
                <select onchange="document.location.href=this.value;">
                    @foreach (Item option in productsPerPageOptions)
                    {
                        @Html.Raw("<option value='" + option.Url + "' " + (option.Selected ? "selected" : "") + " >" + option.Label + " " + T("Catalog.PageSize.PerPage") + "</option>");
                    }
                </select>
            </div>
            var sorting = ViewData["sorting"] as IList<Item>;
            <div class="product-sorting">
                <select onchange='document.location.href=this.value;'>
                    @foreach (Item sortItem in sorting)
                    {
                        var label = sortItem.Label.Replace("title", "Name").Replace("price", "Preis").Replace("brand", "Marke");

                        var name = T(label.Replace("sort.", "").Replace("Asc", "").Replace("Desc", "")).ToString();
                        label = String.Format("{0} {1}", (label.ToLower().Contains("relevance") ? "Relevanz" : name),
                                                                (label.ToLower().Contains("relevance") ? "" : (label.ToLower().EndsWith("asc") ? "aufsteigend" : "absteigend")));

                        @Html.Raw("<option value='" + sortItem.Url + "' " + (sortItem.Selected ? "selected" : "") + " >" + label.First().ToString().ToUpper() + label.Substring(1) + "</option>");
                    }
                </select>
            </div>
        }
    </div>

    <div class="search-results">
        <div class="product-grid">
            <div class="item-grid">
                @foreach (Record record in result)
                {
                    ViewData["record"] = record;
                    //var record = ViewData["record"] as Record; 
                    var util = ViewData["util"] as RenderHelper;

                    string articleNr = (string)record.GetFieldValue(FieldsSection.GetInstance().MasterProduktID);//(string)record.GetFieldValue(FieldsSection.GetInstance().ProductNumber);
                    string title = (string)record.GetFieldValue(FieldsSection.GetInstance().ProductName);
                    string price = (String)record.GetFieldValue(FieldsSection.GetInstance().Price);
                    string oldprice = (string)record.GetFieldValue(FieldsSection.GetInstance().NormalPrice);
                    string description = (string)record.GetFieldValue(FieldsSection.GetInstance().Description);
                    string imageUrl = (string)record.GetFieldValue(FieldsSection.GetInstance().BildUrl);
                    string detailUrl = (string)record.GetFieldValue(FieldsSection.GetInstance().ProductUrl);
                    string sid = Context.Session.Id;
                    <div class="item-box">
                        <div class="product-item" data-productid="@articleNr">
                            <div class="picture">
                                <a href="@detailUrl" onclick="@(util.CreateJavaScriptClickCode(record, sid))">
                                    <img valign="top" src="@imageUrl" alt="no picture"
                                         title="@title" onload="resizePicture(this, 120, 170)" onerror="imageNotFound(this)"
                                         onmouseover="TagToTip('descr@(articleNr)', SHADOW, true)" onmouseout="UnTip()" />
                                </a>
                            </div>
                            <div class="details">
                                <h2 class="product-title">
                                    <a href="@(detailUrl)">@title</a>
                                </h2>
                                <div class="description">
                                    @description
                                </div>
                                <div class="add-info">
                                    <div class="prices">
                                        <div class="box-prices-wrapper">
                                            <span class="price actual-price">@Decimal.Parse(price, new System.Globalization.CultureInfo("de-DE")).ToString("C2", new System.Globalization.CultureInfo("de-DE"))</span>
                                            <span class="price old-price">@(Decimal.Parse(oldprice, new System.Globalization.CultureInfo("de-DE"))> 0? Decimal.Parse(oldprice, new System.Globalization.CultureInfo("de-DE")).ToString("C2", new System.Globalization.CultureInfo("de-DE")): "")</span>
                                        </div>
                                    </div>
                                    <div class="buttons">
                                        <input type="button" value="Add to cart" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('/addproducttocart/catalog/@(articleNr)/1/1');return false;" />
                                        <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('/addproducttocart/catalog/@(articleNr)/2/1');return false;" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="clear">&nbsp;</div>

    if (result != null && result.Count > 0 && !ffParameters.IsNavigation)
    {
        var paging = ViewData["paging"] as Paging;


        <div class="pager">
            @if (paging != null && paging.PageCount > 1)
            {
                <ul>
                    <li>

                        @if (paging.PreviousPageLink != null)
                        {
                            <a href="@(paging.PreviousPageLink.Url.ToString().RemoveUnwantedParameters())">Vorige Seite</a>
                        }
                    </li>
                    @foreach (Item page1 in paging)
                    {
                        <li>
                            @if (page1.Selected)
                            {
                                <span class="paging currentPage">@page1.Label</span>
                            }
                            else
                            {
                                <a class="paging" href="@(page1.Url.ToString().RemoveUnwantedParameters())">@page1.Label</a>
                            }
                        </li>
                    }

                    <li>
                        @if (paging.NextPageLink != null)
                        {
                            <a href="@(paging.NextPageLink.Url.ToString().RemoveUnwantedParameters())">Nächste Seite</a>
                        }
                    </li>

                </ul>
            }
            else
            {
                @String.Format("{0} of {1}", 1, 1)
            }
        </div>
        <div class="seo-bottom">
            @Html.Raw(((SeoInfoModel)ViewBag.SeoInfoModel).SeoText2)
        </div>

    }

}
@section left{
    @if (asn != null)
    {
        // Category
        foreach (AsnGroup group in asn)
        {
            if (group.Name.ToLower() == "kategorie")
            {
                <div class="block block-category-navigation">
                    <div class="title">
                        <strong>@group.Name</strong>
                    </div>
                    <div class="listbox">
                        <ul class="list">
                            @{
                                foreach (AsnFilterItem item in group)
                                {
                                    string url = item.Url.ToString().GetFactFinderUrl((IList<SeoMap>)ViewBag.CategorySeoMap);

                                    <li class="@("level" + item.ClusterLevel) @if (item.Selected) { <text>active</text> } else { <text>inactive</text> }">
                                        @if (item.Selected)
                                        {
                                            <a href="@url" class="sublist-toggle-button open" style="margin:1px 0 0"></a> 
                                            <a href="javascript:void(0);">
                                                @item.Label
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="@url">
                                                @item.Label (@item.MatchCount)
                                            </a>
                                        }
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
        }

        <div class="mobile-filter">
            Produkte filtern
        </div>
        <div class="mobile-filter-inner">
            @foreach (AsnGroup group in asn)
            {
                @*<div class="block block-category-navigation">
                    <div class="title">
                        <strong>@group.Name</strong>
                    </div>
                    <div class="listbox">*@

                @if (group.Style == AsnGroupStyle.Slider)
                {
                    <div class="block filter-block">
                        <div class="title">
                            <a href="#">@group.Name</a>
                            <a class="clearFilterOptions" href="#">X</a>@*@T("SevenSpikes.NopAjaxFilters.Client.Common.Clear")</a>*@
                        </div>
                        <div class="filtersGroupPanel">
                            <ul class="checkbox-list">
                                @foreach (AsnSliderItem slider in group)
                                {
                                    <!-- OneTouchSlider setup script -->
                                    <script>
                                        // This is needed for currency symbols defined as HTML entities
                                        function htmlDecode(input){
                                            var e = document.createElement('div');
                                            e.innerHTML = input;
                                            return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
                                        }
                                        @*We use the ToString() versions that take an IFormatProvider and supply the
                                        invariant culture, so that floating point numbers are serialized with a decimal
                                        point regardless of the current culture.*@
                                        function oneTouchSliderOnLoad() {
                                            oneTouchSlider.addSlider({
                                            hostElementId: 'price-slider',
                                            leftBorder: @(slider.AbsoluteMinimum.ToString(CultureInfo.InvariantCulture)),
                                            rightBorder: @(slider.AbsoluteMaximum.ToString(CultureInfo.InvariantCulture)),
                                            currentLeft: @(slider.SelectedMinimum.ToString(CultureInfo.InvariantCulture)),
                                            currentRight: @(slider.SelectedMaximum.ToString(CultureInfo.InvariantCulture)),
                                            unit: '@(group.Unit)',
                                            callback: sliderSelect
                                            });
                                        }

                                        function sliderSelect(left, right) {
                                            window.location.href="@(Html.Raw(slider.BaseUrl))"+left+" - "+right;
                                        }
                                    </script>
                                    @Html.Raw("<div id='price-slider' style='padding:20px;'></div>")
                                }
                            </ul>
                        </div>
                    </div>
                }
                else if (group.Name.ToLower() == "farbe")
                {
                    <div class="block filter-block">
                        <div class="title">
                            <strong>@group.Name</strong>
                        </div>
                        <div class="filtersGroupPanel colorOptions listbox">
                            <ul class="checkbox-list">
                                @foreach (AsnFilterItem item in group)
                                {
                                    string url = item.Url.ToString().GetFactFinderUrl((IList<SeoMap>)ViewBag.CategorySeoMap);
                                    <li class="checkbox-item @if (item.Selected) { <text>checked</text> }">
                                        @if (item.Selected)
                                        {
                                            <a href="@url" class="sublist-toggle-button open" style="margin:1px 9px 0"></a>
                                        }
                                        <span class="color @(item.Label.Replace("ü","ue"))" title="@(item.Label)">@(item.Label)</span>
                                        <input type="checkbox" ifme="@(item.Label)" id="@(item.Label)" value="@(url)" onchange="if (this.value != '') {document.location.href=this.value;}">
                                        <label for="@(item.Label)">@(item.Label) @group.Unit</label>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
                else if (group.Name.ToLower() == "kategorie")
                {

                }
                else if (group.Style == AsnGroupStyle.Default)
                {
                    <div class="block @if (group.Name.ToLower() == "marke") { <text>block-manufacturer-navigation</text> } else { <text>block-category-navigation</text> }">
                        <div class="title">
                            <strong>@group.Name</strong>
                        </div>
                        <div class="listbox">
                            @{
                                int iShowAtOnce = 10; // Has to be read from FactFinder
                                List<AsnFilterItem> listItems = null;
                                List<AsnFilterItem> comboItems = null;

                                if (group.Count() >= 1)
                                {
                                    listItems = group.Take(iShowAtOnce).ToList();
                                }
                                if (group.Count() > iShowAtOnce)
                                {
                                    comboItems = group.Skip(iShowAtOnce).ToList();
                                }
                            }
                            @if (group.Count() >= 1)
                            {
                                <ul class="list">
                                    @foreach (AsnFilterItem item in listItems)
                                    {
                                        string url = item.Url.ToString().GetFactFinderUrl((IList<SeoMap>)ViewBag.CategorySeoMap);

                                        <li @if (item.Selected) { <text> class="active" </text>  } else { <text> class="inactive" </text> }>
                                            @if (item.Selected)
                                            {
                                                <a href="@url" class="sublist-toggle-button open" style="margin:1px 0 0"></a>
                                                <a href="javascript:void(0);">
                                                    @item.Label
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="@url">
                                                    @item.Label (@item.MatchCount)
                                                </a>
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            @if (group.Count() > iShowAtOnce)
                            {
                                <select aria-label="Select product sort order" id="products-orderby" name="products-orderby" onchange="if (this.value != '' && this.value != null) {document.location.href=this.value;}" class="sortOptionsDropDown">
                                    <option value="#" selected="selected">@comboItems.Count() weitere ...</option>
                                    @foreach (AsnFilterItem item in comboItems)
                                    {
                                        string url = item.Url.ToString().GetFactFinderUrl((IList<SeoMap>)ViewBag.CategorySeoMap);
                                        <option value="@url">@item.Label (@item.MatchCount)</option>
                                    }
                                </select>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="block filter-block">
                        <div class="title">
                            <strong>@group.Name</strong>
                        </div>
                        <div class="filtersGroupPanel filterCheckboxPanel listbox">
                            <ul class="checkbox-list">
                                @{
                                    int linkCount = 0;
                                    foreach (AsnFilterItem item in group)
                                    {
                                        if (item.Selected)
                                        {

                                            @if (group.SelectionType == AsnGroupSelectionType.singleShowUnselected)
                                            {
                                                <li class="asnElement selected lvl@(item.ClusterLevel)">
                                                    <input type="radio" checked="checked" name="@(item.Label)" id="@(item.Label)" value="@(item.Url)" onchange="if (this.value != '') {document.location.href=this.value;}">
                                                    <label for="@(item.Label)">@(item.Label) @group.Unit</label>
                                                </li>
                                            }
                                            else if (group.Style == AsnGroupStyle.MultiSelect)
                                            {
                                                <li class="checkbox-item checked">
                                                    <input type="checkbox" checked="checked" name="@(item.Label)" id="@(item.Label)" value="@(item.Url)" onchange="if (this.value != '') {document.location.href=this.value;}">
                                                    <label for="@(item.Label)">@(item.Label) @group.Unit</label>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="active">
                                                    <a href="@item.Url" class="sublist-toggle-button open" style="margin:1px 0 0"></a>
                                                    <a href="javascript:void(0);">
                                                        @item.Label @group.Unit
                                                    </a>
                                                </li>
                                            }
                                        }
                                        else
                                        {
                                            @if (group.SelectionType == AsnGroupSelectionType.singleShowUnselected)
                                            {
                                                <li class="checkbox-item lvl@(item.ClusterLevel)">
                                                    <input type="radio" name="@(item.Label)" id="@(item.Label)" value="@(item.Url)" onchange="if (this.value != '') {document.location.href=this.value;}">
                                                    <label for="@(item.Label)">@(item.Label) @group.Unit (@item.MatchCount)</label>
                                                </li>
                                            }
                                            else if (group.Style == AsnGroupStyle.MultiSelect)
                                            {
                                                <li class="checkbox-item">
                                                    <input type="checkbox" name="@(item.Label)" id="@(item.Label)" value="@(item.Url)" onchange="if (this.value != '') {document.location.href=this.value;}">
                                                    <label for="@(item.Label)">@(item.Label) @group.Unit (@item.MatchCount)</label>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="inactive">
                                                    <a href="@(item.Url)">@item.Label @group.Unit <span>(@item.MatchCount)</span></a>
                                                </li>
                                            }
                                            linkCount++;
                                        }
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                }
            }
        </div>
    }
    <div class="seo-left">
        @Html.Raw(((SeoInfoModel)ViewBag.SeoInfoModel).SeoText1)
    </div>
}

<script type="text/javascript">
    $(document).ready(function () {

        function setCookie(key, value) {
            var expires = new Date();
            expires.setTime(expires.getTime() + (1 * 24 * 60 * 60 * 1000));
            document.cookie = key + '=' + value + ';expires=' + expires.toUTCString();
        }

        function getCookie(key) {
            var keyValue = document.cookie.match('(^|;) ?' + key + '=([^;]*)(;|$)');
            return keyValue ? keyValue[2] : null;
        }

        // Filter soll nur aktiv sein, wenn vor dem Reaload der Filter weiter verfeinert wurde
        var value = getCookie('filter');
        if (value != null && value == 'on') {
            $('.mobile-filter-inner').css('display', 'inline');
            setCookie('filter', 'off');
        }

        $('.mobile-filter').click(function () {
            if ($('.mobile-filter-inner').css('display') == 'none') {
                $('.mobile-filter-inner').css('display', 'inline');
            }
            else {
                $('.mobile-filter-inner').css('display', 'none');
                setCookie('filter', 'off');
            }
        });

        $('.mobile-filter-inner .sidebar-widget a').click(function () {
            setCookie('filter', 'on');
        });
    });
</script>