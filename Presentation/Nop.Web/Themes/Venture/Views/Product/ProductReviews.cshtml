@model ProductReviewsModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(Model.ProductName);
    Html.AddTitleParts(T("PageTitle.ProductReviews").Text);
    //page class
    Html.AppendPageCssClassParts("html-product-reviews-page");
}
<div class="page product-reviews-page">
    <div class="page-title">
        <h1>@T("Reviews.ProductReviewsFor") <a href="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })">@Model.ProductName</a></h1>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_top", additionalData = Model.ProductId })

        @if (Model.AddProductReview.SuccessfullyAdded)
        {
            <div class="result">
                @Model.AddProductReview.Result
            </div>
        }
        else
        {
            <div class="write-review" id="review-form">
                <div class="title">
                    <strong class="write-review-title">@T("Reviews.Write")</strong>
                    <strong class="close-review-form">@T("SevenSpikes.Themes.Venture.Common.HideReviewForm")</strong>
                </div>
                <div class="write-review-collapse">
                    <form asp-route="ProductReviews" method="post">
                        <div asp-validation-summary="ModelOnly" class="message-error"></div>
                        <div class="fieldset">
                            <div class="form-fields">
                                <div class="inputs">
                                    <label asp-for="AddProductReview.Title" asp-postfix=":"></label>
                                    <input asp-for="AddProductReview.Title" class="review-title" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)" />
                                    <nop-required />
                                    <span asp-validation-for="AddProductReview.Title"></span>
                                </div>
                                <div class="inputs">
                                    <label asp-for="AddProductReview.ReviewText" asp-postfix=":"></label>
                                    <textarea asp-for="AddProductReview.ReviewText" class="review-text" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)"></textarea>
                                    <nop-required />
                                    <span asp-validation-for="AddProductReview.ReviewText"></span>
                                </div>
                                <div class="review-rating">
                                    <label asp-for="AddProductReview.Rating" asp-postfix=":"></label>
                                    <ul>
                                        <li class="label first">@T("Reviews.Fields.Rating.Bad")</li>
                                        <li class="rating-options">
                                            <input asp-for="AddProductReview.Rating" value="1" type="radio" id="addproductrating_1" />
                                            <label class="vote-star" for="addproductrating_1">@T("Reviews.Fields.Rating") 1</label>

                                            <input asp-for="AddProductReview.Rating" value="2" type="radio" id="addproductrating_2" />
                                            <label class="vote-star" for="addproductrating_2">@T("Reviews.Fields.Rating") 2</label>

                                            <input asp-for="AddProductReview.Rating" value="3" type="radio" id="addproductrating_3" />
                                            <label class="vote-star" for="addproductrating_3">@T("Reviews.Fields.Rating") 3</label>

                                            <input asp-for="AddProductReview.Rating" value="4" type="radio" id="addproductrating_4" />
                                            <label class="vote-star" for="addproductrating_4">@T("Reviews.Fields.Rating") 4</label>

                                            <input asp-for="AddProductReview.Rating" value="5" type="radio" id="addproductrating_5" />
                                            <label class="vote-star" for="addproductrating_5">@T("Reviews.Fields.Rating") 5</label>

                                        </li>
                                        <li class="label last">@T("Reviews.Fields.Rating.Excellent")</li>
                                    </ul>
                                </div>
                                @if (Model.AddProductReview.DisplayCaptcha)
                                {
                                    <div class="captcha-box">
                                        <nop-captcha />
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="buttons">
                            <input type="submit" name="add-review" class="button-1 write-product-review-button" value="@T("Reviews.SubmitButton")" />
                        </div>
                    </form>
                </div>
            </div>
        }

        @if (Model.Items.Count > 0)
        {
            <div class="product-review-list">
                @*<div class="title">
                    <strong>@T("Reviews.ExistingReviews")</strong>
                </div>*@
                @foreach (var review in Model.Items)
                {
                    var ratingPercent = review.Rating * 20;
                    <div class="product-review-item">
                        <div class="review-item-head">
                            <div class="review-title">
                                <strong>@review.Title</strong>
                            </div>
                            <div class="product-review-box">
                                <div class="rating">
                                    <div style="width: @(ratingPercent)%">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="review-content">
                            <div class="review-text">
                                @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                            </div>
                            <div class="review-info">
                                <span class="user">
                                    <label>@T("Reviews.From"):</label>
                                    @if (review.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                                    }
                                    else
                                    {
                                        @review.CustomerName
                                    }
                                </span>
                                <span class="separator">|</span>
                                <span class="date">
                                    <label>@T("Reviews.Date"):</label>
                                    <span>@review.WrittenOnStr</span>
                                </span>
                            </div>
                            @await Html.PartialAsync("_ProductReviewHelpfulness", review.Helpfulness)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_inside_review", additionalData = review.Id })
                            @if (!String.IsNullOrEmpty(review.ReplyText))
                            {
                                <div class="reply">
                                    <div class="reply-header">
                                        @T("Reviews.Reply")
                                    </div>
                                    <div class="reply-text">
                                        @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReplyText, false, true, false, false, false, false))
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_bottom", additionalData = Model.ProductId })
    </div>
</div>
