@model ProductDetailsModel
@using Nop.Core.Domain.Catalog
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo;
@using Nop.Core.Domain.Catalog

@using Nop.Custom
@using Nop.Custom.Domain;
@using Omikron.FactFinder
@using Omikron.FactFinder.Data
@using Omikron.FactFinder.Adapter
@using Omikron.FactFinder.Core
@using Omikron.FactFinder.Core.Client
@using Omikron.FactFinder.Core.Page
@using Omikron.FactFinder.Core.Server
@using Omikron.FactFinder.Core.Configuration
@using Omikron.FactFinder.Util

@inject SeoSettings seoSettings
@inject CatalogSettings catalogSettings

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");


    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var showShareButton = catalogSettings.ShowShareButton;

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
    Omikron.FactFinder.Util.HttpContextFactory.Current = Context;
    var requestParser = new RequestParser();
    var requestParameters = requestParser.RequestParameters;
    var requestFactory = new HttpRequestFactory(requestParameters);
    var clientUrlBuilder = new Omikron.FactFinder.Core.Client.UrlBuilder(requestParser);
    var recommendationAdapter = new Recommendation(requestFactory.GetRequest(), clientUrlBuilder);
    var similarProductsAdapter = new SimilarRecords(requestFactory.GetRequest(), clientUrlBuilder);
    IList<string> productIds = new List<string>();
    productIds.Add(Model.Id.ToString());

    ViewData["util"] = new RenderHelper(new SearchParameters(requestParameters), new Search(requestFactory.GetRequest(), clientUrlBuilder));

    recommendationAdapter.SetProductIDs(productIds);
    similarProductsAdapter.SetProductID(productIds.First());
    var recommendations = recommendationAdapter.Recommendations;
    var similarProducts = similarProductsAdapter.Records;
}
<!--product breadcrumb-->
@section Breadcrumb
    {
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page simple-template">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential-wrapper">
                    <div class="product-essential">
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                        @{
                            var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom" });
                        }
                        @if (!String.IsNullOrEmpty(cloudZoom.ToHtmlString()))
                        {
                            @cloudZoom
                        }
                        else
                        {
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
                        <div class="overview">
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_top", additionalData = Model.Id })

                            <div class="product-name">
                                <h1 itemprop="name">
                                    @Model.Name
                                </h1>
                            </div>

                            @await Html.PartialAsync("_Discontinued", Model)

                            <!--manufacturers-->
                            @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)

                            <!--SKU, MAN, GTIN, vendor-->
                            @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)

                            @if(!String.IsNullOrEmpty(Model.AdminComment)) { 
                            <span class="label">Abgrenzung: </span><span class="value">@Model.AdminComment</span>
                            }

                            <!--product reviews-->
                            @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)

                            <!--delivery-->
                            @await Html.PartialAsync("_DeliveryInfo", Model)

                            <!--price-->
                            @{
        var dataDictPrice = new ViewDataDictionary(ViewData);
        dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                        @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                        @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                            }

                            @if (!String.IsNullOrEmpty(Model.ShortDescription))
    {
                        <div class="short-description">
                            @Html.Raw(Model.ShortDescription)
                        </div>
}

                            <div class="availability-attributes-wrapper">
                                <!--rental info-->
                                @{
            var dataDictRental = new ViewDataDictionary(ViewData);
            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                        @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                                }
                                <!--availability-->
                                @if (!String.IsNullOrWhiteSpace(Model.StockAvailability))
        {
                        <div class="availability">
                            <div class="stock">
                                <span class="label">@T("Products.Availability"):</span>
                                <span class="value @Model.StockAvailability.ToLower().Replace(" ","-").Replace("ü","ue")" id="stock-availability-value-@Model.Id">@Model.StockAvailability</span>
                            </div>
                            <div class="stock-text" id="stock-availability-text-@Model.Id">
                                @if (Model.StockAvailability.ToLower().Contains("verfügbar"))
        {
                        <text>Lieferzeit: 2-3 Werktage</text>
}
                            </div>
                        </div>
}
                                <!--attributes-->
                                @{
            var dataDictAttributes = new ViewDataDictionary(ViewData);
            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                        @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                                }
                            </div>
                            <!--gift card-->
                            @{
        var dataDictGiftCard = new ViewDataDictionary(ViewData);
        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                        @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                            }

                            @if (Model.AddToCart.CustomerEntersPrice)
    {
                        <div class="customer-entered-price">
                            <div class="price-input">
                                <label for="addtocart_@(Model.Id)_CustomerEnteredPrice" class="enter-price-label">@T("Products.EnterProductPrice")</label>
                                @*round price*@
                                <input type="text" id="addtocart_@(Model.Id)_CustomerEnteredPrice" name="addtocart_@(Model.Id).CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.AddToCart.CustomerEnteredPrice))" class="enter-price-input" />
                            </div>
                            <div class="price-range">
                                @Model.AddToCart.CustomerEnteredPriceRange
                            </div>
                        </div>
}

                            <!--minimum quantity notification-->
                            @if (!String.IsNullOrEmpty(Model.AddToCart.MinimumQuantityNotification))
    {
                        <div class="min-qty-notification">@Model.AddToCart.MinimumQuantityNotification</div>
}

                            <!--buttons-->
                            <div class="overview-buttons">
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", additionalData = Model.Id })
                                <!--add to cart-->
                                @{
            var dataDictAddToCart = new ViewDataDictionary(ViewData);
            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                        @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                }

                                <!--wishlist-->
                                @if (!Model.AddToCart.DisableWishlistButton)
        {
                        <div class="wishlist-button-wrapper" title="@T("products.wishlist.addtowishlist")">
                            @{
        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                        @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                            }
                        </div>
}
                                <!--compare button-->
                                @if (Model.CompareProductsEnabled)
        {
                        <div class="compare-products-wrapper" title="@T("products.compare.addtocomparelist")">
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                        </div>
}

                                <!--email a friend button-->
                                @if (Model.EmailAFriendEnabled)
        {
                        <div class="email-a-friend-button-wrapper" title="@T("products.emailafriend")">
                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                        </div>
}

                                <!--back in stock subscription button-->
                                @if (!String.IsNullOrWhiteSpace(Model.StockAvailability) && Model.DisplayBackInStockSubscription)
        {
                        <div class="back-in-stock-subscription-button-wrapper" title="@T("backinstocksubscriptions.notifymewhenavailable")">
                            @await Html.PartialAsync("_BackInStockSubscription", Model)
                        </div>
}

                                <!--sample download button-->
                                @if (Model.HasSampleDownload)
        {
                        <div class="download-sample-button-wrapper" title="@T("products.downloadsample")">
                            @await Html.PartialAsync("_DownloadSample", Model)
                        </div>
}

                                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", additionalData = Model.Id })
                            </div>

                            @await Component.InvokeAsync("Widget", new { widgetZone = "venture_theme_submit_ticket_product_page_button", additionalData = Model.Id })

                            <div class="overview-footer">
                                @if (showShareButton)
        {
                        @await Html.PartialAsync("_ShareButton", Model)
}

                                @if (Model.FreeShippingNotificationEnabled && Model.IsFreeShipping)
        {
                        <div class="free-shipping">@T("Products.FreeShipping")</div>
}
                            </div>

                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                        </div>
                    </div>
                </div>
                <div class="product-page-bottom">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id })
                    <div class="product-collateral">
                        @if (!String.IsNullOrEmpty(Model.FullDescription))
                        {
                            <div class="full-description-wrapper">
                                <div class="title">
                                    <strong>@T("SevenSpikes.Themes.Venture.Common.ProductPageFullDescription")</strong>
                                </div>
                                <div class="full-description" itemprop="description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            </div>
                        }
                        @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                        @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                    </div>
                    @if (recommendations.Count > 0)
                    {
                        <div class="related-products-grid product-grid">
                            <div class="title">
                                <strong>@T("Products.RecommendedProducts")</strong>
                            </div>
                            <div class="item-grid">
                                @{
                                    var util = ViewData["util"] as RenderHelper;
                                    int itemCount = 0;
                                }
                                @foreach (var record in recommendations)
                                {
                                    if (itemCount++ >= 4)
                                    {
                                        break;
                                    }
                                    string articleNr = (string)record.GetFieldValue(FieldsSection.GetInstance().MasterProduktID);//(string)record.GetFieldValue(FieldsSection.GetInstance().ProductNumber);
                                    string title = (string)record.GetFieldValue(FieldsSection.GetInstance().ProductName);
                                    string price = (String)record.GetFieldValue(FieldsSection.GetInstance().Price);
                                    //string oldprice = (string)record.GetFieldValue(FieldsSection.GetInstance().OldPrice); // MISSING
                                    string description = (string)record.GetFieldValue(FieldsSection.GetInstance().Description);
                                    string imageUrl = (string)record.GetFieldValue(FieldsSection.GetInstance().BildUrl);
                                    string detailUrl = (string)record.GetFieldValue(FieldsSection.GetInstance().ProductUrl);
                                    string sid = Context.Session.Id;

                                    <div class="item-box">
                                        <div class="product-item" data-productid="@articleNr">
                                            <div class="picture">
                                                <a href="@detailUrl" onclick="@(util.CreateJavaScriptClickCode(record, sid))">
                                                    <img valign="top" src="@imageUrl" alt="no picture"
                                                         title="@title" @*onload="resizePicture(this, 120, 170)"*@ onerror="imageNotFound(this)"
                                                         @*onmouseover="TagToTip('descr@(articleNr)', SHADOW, true)" onmouseout="UnTip()"*@ />
                                                </a>
                                            </div>
                                            <div class="details">
                                                <h2 class="product-title">
                                                    <a href="@(detailUrl)"><text>@title</text></a>
                                                </h2>
                                                <div class="description">
                                                    @description
                                                </div>
                                                <div class="add-info">
                                                    <div class="prices">
                                                        <div class="box-prices-wrapper">
                                                            <span class="price actual-price">@Decimal.Parse(price, new System.Globalization.CultureInfo("de-DE")).ToString("C2", new System.Globalization.CultureInfo("de-DE"))</span>
                                                            @*<span class="price old-price">@oldprice</span>*@
                                                        </div>
                                                    </div>
                                                    <div class="buttons">
                                                        <input type="button" value="Add to cart" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('/addproducttocart/catalog/@(articleNr)/1/1');return false;" />
                                                        <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('/addproducttocart/catalog/@(articleNr)/2/1');return false;" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    @if (similarProducts.Count > 0)
                    {
                        <div class="related-products-grid product-grid">
                            <div class="title">
                                <strong>@T("Products.SimilarProducts")</strong>
                            </div>
                            <div class="item-grid">
                                @{
                                    var util = ViewData["util"] as RenderHelper;
                                    int itemCount = 0;
                                }
                                @foreach (var record in similarProducts)
                                {
                                    if (itemCount++ >= 4)
                                    {
                                        break;
                                    }
                                    string articleNr = (string)record.GetFieldValue(FieldsSection.GetInstance().MasterProduktID);//(string)record.GetFieldValue(FieldsSection.GetInstance().ProductNumber);
                                    string title = (string)record.GetFieldValue(FieldsSection.GetInstance().ProductName);
                                    string price = (String)record.GetFieldValue(FieldsSection.GetInstance().Price);
                                    //string oldprice = (string)record.GetFieldValue(FieldsSection.GetInstance().OldPrice); // MISSING
                                    string description = (string)record.GetFieldValue(FieldsSection.GetInstance().Description);
                                    string imageUrl = (string)record.GetFieldValue(FieldsSection.GetInstance().BildUrl);
                                    string detailUrl = (string)record.GetFieldValue(FieldsSection.GetInstance().ProductUrl);
                                    string sid = Context.Session.Id;

                                    <div class="item-box">
                                        <div class="product-item" data-productid="@articleNr">
                                            <div class="picture">
                                                <a href="@detailUrl" onclick="@(util.CreateJavaScriptClickCode(record, sid))">
                                                    <img valign="top" src="@imageUrl" alt="no picture"
                                                         title="@title" @*onload="resizePicture(this, 120, 170)"*@ onerror="imageNotFound(this)"
                                                         @*onmouseover="TagToTip('descr@(articleNr)', SHADOW, true)" onmouseout="UnTip()"*@ />
                                                </a>
                                            </div>
                                            <div class="details">
                                                <h2 class="product-title">
                                                    <a href="@(detailUrl)"><text>@title</text></a>
                                                </h2>
                                                <div class="description">
                                                    @description
                                                </div>
                                                <div class="add-info">
                                                    <div class="prices">
                                                        <div class="box-prices-wrapper">
                                                            <span class="price actual-price">@Decimal.Parse(price, new System.Globalization.CultureInfo("de-DE")).ToString("C2", new System.Globalization.CultureInfo("de-DE"))</span>
                                                            @*<span class="price old-price">@oldprice</span>*@
                                                        </div>
                                                    </div>
                                                    <div class="buttons">
                                                        <input type="button" value="Add to cart" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('/addproducttocart/catalog/@(articleNr)/1/1');return false;" />
                                                        <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('/addproducttocart/catalog/@(articleNr)/2/1');return false;" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                </div>
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
    </div>
</div>
